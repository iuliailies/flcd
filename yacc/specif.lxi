%{
	#include<stdio.h>
	#include <string.h>
    #include "lang.tab.h"
	int lines = 0;
%}

%option noyywrap
%option caseless

DIGIT 		[0-9]
NON_ZERO_DIGIT [1-9]
INT_CONSTANT [-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z]
STRING_CONSTANT [`$]({LETTER}|{DIGIT}|" ")*[`$]
IDENTIFIER {LETTER}({LETTER}|{DIGIT})*

%%

true    {printf( "Reserved word: %s\n", yytext); return TRUE;}
false	{printf( "Reserved word: %s\n", yytext); return FALSE;}
def	    {printf( "Reserved word: %s\n", yytext); return DEF;}
int	    {printf( "Reserved word: %s\n", yytext); return INT;}
string	{printf( "Reserved word: %s\n", yytext); return STRING;}
read	{printf( "Reserved word: %s\n", yytext); return READ;}
print	{printf( "Reserved word: %s\n", yytext); return PRINT;}
if	    {printf( "Reserved word: %s\n", yytext); return IF;}
else	{printf( "Reserved word: %s\n", yytext); return ELSE;}
while	{printf( "Reserved word: %s\n", yytext); return WHILE;}
exit	{printf( "Reserved word: %s\n", yytext); return EXIT;}
GO	    {printf( "Reserved word: %s\n", yytext); return GO;}
BYE	    {printf( "Reserved word: %s\n", yytext); return BYE;}

{IDENTIFIER}                                 {printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}
{INT_CONSTANT}					             {printf( "Constant: %s\n", yytext ); return INT_CONSTANT;}
{STRING_CONSTANT}				             {printf( "Constant: %s\n", yytext ); return STRING_CONSTANT;}

"[" {printf( "Separator: %s\n", yytext ); return OPEN_RIGHT_BRACKET;}
"]" {printf( "Separator: %s\n", yytext ); return CLOSED_RIGHT_BRACKET;}
"{" {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}" {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"(" {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")" {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
":" {printf( "Separator: %s\n", yytext ); return COLON;}
";" {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}


"+"         {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"         {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"         {printf( "Operator: %s\n", yytext ); return MUL;}
"/"         {printf( "Operator: %s\n", yytext ); return DIV;}
"%"         {printf( "Operator: %s\n", yytext ); return MOD;}
">"         {printf( "Operator: %s\n", yytext ); return GT;}
"<"         {printf( "Operator: %s\n", yytext ); return LT;}
"<="        {printf( "Operator: %s\n", yytext ); return LE;}
"=="        {printf( "Operator: %s\n", yytext ); return DBLEQ;}
"="         {printf( "Operator: %s\n", yytext ); return EQ;}
">="        {printf( "Operator: %s\n", yytext ); return GE;}
"!="        {printf( "Operator: %s\n", yytext ); return NE;}
"^"         {printf( "Operator: %s\n", yytext ); return POWER;}


[ \t]+ 		{}
[\n]+ 		{lines++;}


.             {printf("Error at token %s at line %d\n", yytext, lines); return -1;}

%%
